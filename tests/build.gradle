group = "net.devh"
version = "${projectVersion}"

apply plugin: 'com.google.protobuf'

apply plugin: 'eclipse'
eclipse {
    project {
        name = 'grpc-spring-boot-tests'
    }
    classpath {
        file.beforeMerged { cp ->
            def generatedGrpcFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/test/grpc', null);
            generatedGrpcFolder.entryAttributes['ignore_optional_problems'] = 'true';
            cp.entries.add( generatedGrpcFolder );
            def generatedJavaFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/test/java', null);
            generatedJavaFolder.entryAttributes['ignore_optional_problems'] = 'true';
            cp.entries.add( generatedJavaFolder );
        }
    }
}

compileTestJava.dependsOn(processTestResources)

dependencies {
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

idea {
    module {
        sourceDirs += file("src/generated/test/java")
        sourceDirs += file("src/generated/test/grpc")
        generatedSourceDirs += file("src/generated/test/java")
        generatedSourceDirs += file("src/generated/test/grpc")
    }
}

buildscript {
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePluginVersion}"
    }
}

dependencies {
    compile project(':grpc-server-spring-boot-starter')
    compile project(':grpc-client-spring-boot-starter')
    testImplementation(
        "io.grpc:grpc-testing:${grpcVersion}",
        "org.springframework.boot:spring-boot-starter-test:${springBootVersion}",
        "org.springframework.security:spring-security-config:${springSecurityVersion}",
        "io.netty:netty-tcnative-boringssl-static:${nettyTCNativeVersion}",
        "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    )
    testRuntimeOnly(
        "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
    )
}

test {
    useJUnitPlatform()
    testLogging {
        // failFast = true
        // showStandardStreams = true
        exceptionFormat = 'full'
    }
}
